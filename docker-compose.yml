services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    entrypoint: "uv run"
    command: "uvicorn travel_map.app:app --host 0.0.0.0 --port 8000 --reload --no-access-log"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning", "--appendonly", "yes"]

  db:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: supersecret
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - --path.rootfs=/host
    pid: host
    volumes:
      - /:/host:ro,rslave

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
      - --web.enable-lifecycle
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - node-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - loki
      - tempo
      - alloy

  loki:
    image: grafana/loki:2.9.4
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./loki-config.yml:/etc/loki/config.yml:ro
      - loki-data:/loki
    ports: ["3100:3100"]


  tempo:
    image: grafana/tempo:2.6.0
    command: ["-config.file=/etc/tempo/config.yml"]
    ports:
      - "3200:3200"   # HTTP (querier/query-frontend API, metrics)
      - "9095:9095"   # gRPC (query-frontend <-> querier)
    volumes:
      - ./tempo-config.yml:/etc/tempo/config.yml:ro
      - tempo-data:/var/tempo


  alloy:
    image: grafana/alloy:latest
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - /etc/alloy/config.river
    ports:
      - "4317:4317" # OTLP gRPC (aplikacje → Alloy)
      - "4318:4318" # OTLP HTTP (aplikacje → Alloy)
      - "12345:12345" # Alloy UI (opcjonalnie)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # autodiscovery kontenerów
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./alloy-config.river:/etc/alloy/config.river:ro
    depends_on:
      - loki
      - tempo


volumes:
  redis-data:
  pgdata:
  grafana-storage:
  loki-data:
  tempo-data:
